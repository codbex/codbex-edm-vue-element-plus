openapi: 3.0.3
info:
  title: HR Application - OpenAPI 3.0
  version: 1.0.0
  description: This is demo HR application
externalDocs:
  description: Find out more about Eclipse Dirigible
  url: https://dirigible.io
servers:
  - url: /services/ts
tags:
  - name: EmployeeManagement
  - name: EmployeeManagement
  - name: EmployeeManagement
  - name: Settings
  - name: RecruitmentAndOnboarding
  - name: RecruitmentAndOnboarding
  - name: PerformanceAndAttendance
  - name: PerformanceAndAttendance
  - name: Settings
paths:
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmployeeService.ts:
    get:
      summary: List Employee
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Employee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Employee
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmployeeService.ts/{id}:
    get:
      summary: Get Employee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Employee'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Employee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Employee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmployeeService.ts/count:
    get:
      summary: Count the number of Employee
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Employee by EmployeeFilterOptions
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FullName: "abcd"
                      Email: "abcd"
                      PhoneNumber: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      FullName: "abcd"
                      Email: "abcd"
                      PhoneNumber: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmployeeService.ts/search:
    post:
      summary: Search Employee by EmployeeFilterOptions
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FullName: "abcd"
                      Email: "abcd"
                      PhoneNumber: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      FullName: "abcd"
                      Email: "abcd"
                      PhoneNumber: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Employee'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/DepartmentService.ts:
    get:
      summary: List Department
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Department'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Department
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/DepartmentService.ts/{id}:
    get:
      summary: Get Department by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Department'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Department by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Department by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/DepartmentService.ts/count:
    get:
      summary: Count the number of Department
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Department by DepartmentFilterOptions
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/DepartmentService.ts/search:
    post:
      summary: Search Department by DepartmentFilterOptions
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Department'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmploymentContractService.ts:
    get:
      summary: List EmploymentContract
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EmploymentContract'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create EmploymentContract
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentContract'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentContract'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmploymentContractService.ts/{id}:
    get:
      summary: Get EmploymentContract by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EmploymentContract'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EmploymentContract by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentContract'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentContract'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EmploymentContract by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - EmployeeManagement
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmploymentContractService.ts/count:
    get:
      summary: Count the number of EmploymentContract
      tags:
        - EmployeeManagement
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of EmploymentContract by EmploymentContractFilterOptions
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentContractFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EmployeeName: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      EmployeeName: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/EmployeeManagement/EmploymentContractService.ts/search:
    post:
      summary: Search EmploymentContract by EmploymentContractFilterOptions
      tags:
        - EmployeeManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentContractFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EmployeeName: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      EmployeeName: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EmploymentContract'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/ContractTypeService.ts:
    get:
      summary: List ContractType
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Settings
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ContractType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ContractType
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractType'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/ContractTypeService.ts/{id}:
    get:
      summary: Get ContractType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Settings
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ContractType'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ContractType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractType'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ContractType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Settings
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/ContractTypeService.ts/count:
    get:
      summary: Count the number of ContractType
      tags:
        - Settings
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ContractType by ContractTypeFilterOptions
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTypeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/ContractTypeService.ts/search:
    post:
      summary: Search ContractType by ContractTypeFilterOptions
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTypeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ContractType'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/JobPostingService.ts:
    get:
      summary: List JobPosting
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - RecruitmentAndOnboarding
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/JobPosting'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create JobPosting
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPosting'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosting'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/JobPostingService.ts/{id}:
    get:
      summary: Get JobPosting by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - RecruitmentAndOnboarding
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/JobPosting'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update JobPosting by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPosting'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosting'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete JobPosting by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - RecruitmentAndOnboarding
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/JobPostingService.ts/count:
    get:
      summary: Count the number of JobPosting
      tags:
        - RecruitmentAndOnboarding
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of JobPosting by JobPostingFilterOptions
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostingFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      JobTitle: "abcd"
                      JobDescription: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      JobTitle: "abcd"
                      JobDescription: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/JobPostingService.ts/search:
    post:
      summary: Search JobPosting by JobPostingFilterOptions
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostingFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      JobTitle: "abcd"
                      JobDescription: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      JobTitle: "abcd"
                      JobDescription: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/JobPosting'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/CandidateApplicationService.ts:
    get:
      summary: List CandidateApplication
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - RecruitmentAndOnboarding
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CandidateApplication'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create CandidateApplication
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateApplication'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateApplication'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/CandidateApplicationService.ts/{id}:
    get:
      summary: Get CandidateApplication by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - RecruitmentAndOnboarding
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CandidateApplication'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update CandidateApplication by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateApplication'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateApplication'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete CandidateApplication by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - RecruitmentAndOnboarding
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/CandidateApplicationService.ts/count:
    get:
      summary: Count the number of CandidateApplication
      tags:
        - RecruitmentAndOnboarding
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of CandidateApplication by CandidateApplicationFilterOptions
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateApplicationFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      CandidateName: "abcd"
                      Email: "abcd"
                      ResumeLink: "abcd"
                      PhoneNumber: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      CandidateName: "abcd"
                      Email: "abcd"
                      ResumeLink: "abcd"
                      PhoneNumber: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/RecruitmentAndOnboarding/CandidateApplicationService.ts/search:
    post:
      summary: Search CandidateApplication by CandidateApplicationFilterOptions
      tags:
        - RecruitmentAndOnboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateApplicationFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      CandidateName: "abcd"
                      Email: "abcd"
                      ResumeLink: "abcd"
                      PhoneNumber: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      CandidateName: "abcd"
                      Email: "abcd"
                      ResumeLink: "abcd"
                      PhoneNumber: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CandidateApplication'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/PerformanceReviewService.ts:
    get:
      summary: List PerformanceReview
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - PerformanceAndAttendance
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/PerformanceReview'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create PerformanceReview
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceReview'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceReview'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/PerformanceReviewService.ts/{id}:
    get:
      summary: Get PerformanceReview by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - PerformanceAndAttendance
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/PerformanceReview'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update PerformanceReview by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceReview'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceReview'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete PerformanceReview by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - PerformanceAndAttendance
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/PerformanceReviewService.ts/count:
    get:
      summary: Count the number of PerformanceReview
      tags:
        - PerformanceAndAttendance
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of PerformanceReview by PerformanceReviewFilterOptions
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceReviewFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EmployeeName: "abcd"
                      Comments: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      EmployeeName: "abcd"
                      Comments: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/PerformanceReviewService.ts/search:
    post:
      summary: Search PerformanceReview by PerformanceReviewFilterOptions
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceReviewFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EmployeeName: "abcd"
                      Comments: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      EmployeeName: "abcd"
                      Comments: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/PerformanceReview'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/AttendanceRecordService.ts:
    get:
      summary: List AttendanceRecord
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - PerformanceAndAttendance
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttendanceRecord'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create AttendanceRecord
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceRecord'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceRecord'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/AttendanceRecordService.ts/{id}:
    get:
      summary: Get AttendanceRecord by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - PerformanceAndAttendance
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttendanceRecord'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update AttendanceRecord by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceRecord'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceRecord'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete AttendanceRecord by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - PerformanceAndAttendance
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/AttendanceRecordService.ts/count:
    get:
      summary: Count the number of AttendanceRecord
      tags:
        - PerformanceAndAttendance
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of AttendanceRecord by AttendanceRecordFilterOptions
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceRecordFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EmployeeName: "abcd"
                      Notes: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      EmployeeName: "abcd"
                      Notes: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/PerformanceAndAttendance/AttendanceRecordService.ts/search:
    post:
      summary: Search AttendanceRecord by AttendanceRecordFilterOptions
      tags:
        - PerformanceAndAttendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceRecordFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EmployeeName: "abcd"
                      Notes: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      EmployeeName: "abcd"
                      Notes: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttendanceRecord'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/AttendanceStatusService.ts:
    get:
      summary: List AttendanceStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Settings
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttendanceStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create AttendanceStatus
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/AttendanceStatusService.ts/{id}:
    get:
      summary: Get AttendanceStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Settings
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttendanceStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update AttendanceStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete AttendanceStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Settings
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/AttendanceStatusService.ts/count:
    get:
      summary: Count the number of AttendanceStatus
      tags:
        - Settings
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of AttendanceStatus by AttendanceStatusFilterOptions
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-edm-vue-element-plus/gen/model/api/Settings/AttendanceStatusService.ts/search:
    post:
      summary: Search AttendanceStatus by AttendanceStatusFilterOptions
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttendanceStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Employee:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        FullName:
          type: string
          minLength: 0
          maxLength: 64
        Email:
          type: string
          minLength: 0
          maxLength: 32
        PhoneNumber:
          type: string
          minLength: 0
          maxLength: 20
        DateOfJoining:
        Department:
          type: integer
          format: int32
        Status:
          type: boolean
    EmployeeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FullName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                PhoneNumber:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                DateOfJoining:
                  oneOf:
                Department:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FullName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                PhoneNumber:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                DateOfJoining:
                  oneOf:
                Department:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            contains:
              type: object
              properties:
                Id:
                FullName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                DateOfJoining:
                Department:
                Status:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FullName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                DateOfJoining:
                Department:
                  type: integer
                  format: int32
                Status:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FullName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                DateOfJoining:
                Department:
                  type: integer
                  format: int32
                Status:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FullName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                DateOfJoining:
                Department:
                  type: integer
                  format: int32
                Status:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FullName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                DateOfJoining:
                Department:
                  type: integer
                  format: int32
                Status:
        $select:
          type: array
          example: ["Id", "FullName", "Email", "PhoneNumber", "DateOfJoining", "Department", "Status"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,FullName,Email,PhoneNumber,DateOfJoining,Department,Status"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Department:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    DepartmentFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    EmploymentContract:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        EmployeeName:
          type: string
          minLength: 0
          maxLength: 64
        ContractStart:
        ContractEnd:
        Salary:
          type: integer
          format: int32
        ContractType:
          type: integer
          format: int32
        RenewalNoticePeriod:
          type: integer
          format: int32
    EmploymentContractFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EmployeeName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ContractStart:
                  oneOf:
                ContractEnd:
                  oneOf:
                Salary:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ContractType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                RenewalNoticePeriod:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EmployeeName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ContractStart:
                  oneOf:
                ContractEnd:
                  oneOf:
                Salary:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ContractType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                RenewalNoticePeriod:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ContractStart:
                ContractEnd:
                Salary:
                ContractType:
                RenewalNoticePeriod:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ContractStart:
                ContractEnd:
                Salary:
                  type: integer
                  format: int32
                ContractType:
                  type: integer
                  format: int32
                RenewalNoticePeriod:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ContractStart:
                ContractEnd:
                Salary:
                  type: integer
                  format: int32
                ContractType:
                  type: integer
                  format: int32
                RenewalNoticePeriod:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ContractStart:
                ContractEnd:
                Salary:
                  type: integer
                  format: int32
                ContractType:
                  type: integer
                  format: int32
                RenewalNoticePeriod:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ContractStart:
                ContractEnd:
                Salary:
                  type: integer
                  format: int32
                ContractType:
                  type: integer
                  format: int32
                RenewalNoticePeriod:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "EmployeeName", "ContractStart", "ContractEnd", "Salary", "ContractType", "RenewalNoticePeriod"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,EmployeeName,ContractStart,ContractEnd,Salary,ContractType,RenewalNoticePeriod"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ContractType:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    ContractTypeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    JobPosting:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        JobTitle:
          type: string
          minLength: 0
          maxLength: 64
        JobDescription:
          type: string
          minLength: 0
          maxLength: 4096
        Department:
          type: integer
          format: int32
        PostingDate:
        ApplicationDeadline:
        RemoteOption:
          type: boolean
    JobPostingFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                JobTitle:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                JobDescription:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 4096
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 4096
                Department:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                PostingDate:
                  oneOf:
                ApplicationDeadline:
                  oneOf:
                RemoteOption:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                JobTitle:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                JobDescription:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 4096
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 4096
                Department:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                PostingDate:
                  oneOf:
                ApplicationDeadline:
                  oneOf:
                RemoteOption:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            contains:
              type: object
              properties:
                Id:
                JobTitle:
                  type: string
                  minLength: 0
                  maxLength: 64
                JobDescription:
                  type: string
                  minLength: 0
                  maxLength: 4096
                Department:
                PostingDate:
                ApplicationDeadline:
                RemoteOption:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                JobTitle:
                  type: string
                  minLength: 0
                  maxLength: 64
                JobDescription:
                  type: string
                  minLength: 0
                  maxLength: 4096
                Department:
                  type: integer
                  format: int32
                PostingDate:
                ApplicationDeadline:
                RemoteOption:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                JobTitle:
                  type: string
                  minLength: 0
                  maxLength: 64
                JobDescription:
                  type: string
                  minLength: 0
                  maxLength: 4096
                Department:
                  type: integer
                  format: int32
                PostingDate:
                ApplicationDeadline:
                RemoteOption:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                JobTitle:
                  type: string
                  minLength: 0
                  maxLength: 64
                JobDescription:
                  type: string
                  minLength: 0
                  maxLength: 4096
                Department:
                  type: integer
                  format: int32
                PostingDate:
                ApplicationDeadline:
                RemoteOption:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                JobTitle:
                  type: string
                  minLength: 0
                  maxLength: 64
                JobDescription:
                  type: string
                  minLength: 0
                  maxLength: 4096
                Department:
                  type: integer
                  format: int32
                PostingDate:
                ApplicationDeadline:
                RemoteOption:
        $select:
          type: array
          example: ["Id", "JobTitle", "JobDescription", "Department", "PostingDate", "ApplicationDeadline", "RemoteOption"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,JobTitle,JobDescription,Department,PostingDate,ApplicationDeadline,RemoteOption"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    CandidateApplication:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        CandidateName:
          type: string
          minLength: 0
          maxLength: 64
        Email:
          type: string
          minLength: 0
          maxLength: 32
        ResumeLink:
          type: string
          minLength: 0
          maxLength: 256
        PhoneNumber:
          type: string
          minLength: 0
          maxLength: 20
        PreferredStartDate:
        ExpectedSalary:
          type: integer
          format: int32
    CandidateApplicationFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                CandidateName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                ResumeLink:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 256
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 256
                PhoneNumber:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                PreferredStartDate:
                  oneOf:
                ExpectedSalary:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                CandidateName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                ResumeLink:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 256
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 256
                PhoneNumber:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                PreferredStartDate:
                  oneOf:
                ExpectedSalary:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                CandidateName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                ResumeLink:
                  type: string
                  minLength: 0
                  maxLength: 256
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                PreferredStartDate:
                ExpectedSalary:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                CandidateName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                ResumeLink:
                  type: string
                  minLength: 0
                  maxLength: 256
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                PreferredStartDate:
                ExpectedSalary:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                CandidateName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                ResumeLink:
                  type: string
                  minLength: 0
                  maxLength: 256
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                PreferredStartDate:
                ExpectedSalary:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                CandidateName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                ResumeLink:
                  type: string
                  minLength: 0
                  maxLength: 256
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                PreferredStartDate:
                ExpectedSalary:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                CandidateName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Email:
                  type: string
                  minLength: 0
                  maxLength: 32
                ResumeLink:
                  type: string
                  minLength: 0
                  maxLength: 256
                PhoneNumber:
                  type: string
                  minLength: 0
                  maxLength: 20
                PreferredStartDate:
                ExpectedSalary:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "CandidateName", "Email", "ResumeLink", "PhoneNumber", "PreferredStartDate", "ExpectedSalary"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,CandidateName,Email,ResumeLink,PhoneNumber,PreferredStartDate,ExpectedSalary"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    PerformanceReview:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        EmployeeName:
          type: string
          minLength: 0
          maxLength: 64
        ReviewPeriod:
        ReviewDate:
        Rating:
          type: integer
          format: int32
        Comments:
          type: string
          minLength: 0
          maxLength: 256
    PerformanceReviewFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EmployeeName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ReviewPeriod:
                  oneOf:
                ReviewDate:
                  oneOf:
                Rating:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Comments:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 256
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 256
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EmployeeName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ReviewPeriod:
                  oneOf:
                ReviewDate:
                  oneOf:
                Rating:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Comments:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 256
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 256
            contains:
              type: object
              properties:
                Id:
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReviewPeriod:
                ReviewDate:
                Rating:
                Comments:
                  type: string
                  minLength: 0
                  maxLength: 256
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReviewPeriod:
                ReviewDate:
                Rating:
                  type: integer
                  format: int32
                Comments:
                  type: string
                  minLength: 0
                  maxLength: 256
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReviewPeriod:
                ReviewDate:
                Rating:
                  type: integer
                  format: int32
                Comments:
                  type: string
                  minLength: 0
                  maxLength: 256
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReviewPeriod:
                ReviewDate:
                Rating:
                  type: integer
                  format: int32
                Comments:
                  type: string
                  minLength: 0
                  maxLength: 256
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReviewPeriod:
                ReviewDate:
                Rating:
                  type: integer
                  format: int32
                Comments:
                  type: string
                  minLength: 0
                  maxLength: 256
        $select:
          type: array
          example: ["Id", "EmployeeName", "ReviewPeriod", "ReviewDate", "Rating", "Comments"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,EmployeeName,ReviewPeriod,ReviewDate,Rating,Comments"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    AttendanceRecord:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        EmployeeName:
          type: string
          minLength: 0
          maxLength: 64
        Date:
        CheckInTime:
        CheckOutTime:
        AttendanceStatus:
          type: integer
          format: int32
        Notes:
          type: string
          minLength: 0
          maxLength: 256
    AttendanceRecordFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EmployeeName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Date:
                  oneOf:
                CheckInTime:
                  oneOf:
                CheckOutTime:
                  oneOf:
                AttendanceStatus:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Notes:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 256
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 256
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EmployeeName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Date:
                  oneOf:
                CheckInTime:
                  oneOf:
                CheckOutTime:
                  oneOf:
                AttendanceStatus:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Notes:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 256
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 256
            contains:
              type: object
              properties:
                Id:
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Date:
                CheckInTime:
                CheckOutTime:
                AttendanceStatus:
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 256
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Date:
                CheckInTime:
                CheckOutTime:
                AttendanceStatus:
                  type: integer
                  format: int32
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 256
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Date:
                CheckInTime:
                CheckOutTime:
                AttendanceStatus:
                  type: integer
                  format: int32
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 256
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Date:
                CheckInTime:
                CheckOutTime:
                AttendanceStatus:
                  type: integer
                  format: int32
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 256
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EmployeeName:
                  type: string
                  minLength: 0
                  maxLength: 64
                Date:
                CheckInTime:
                CheckOutTime:
                AttendanceStatus:
                  type: integer
                  format: int32
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 256
        $select:
          type: array
          example: ["Id", "EmployeeName", "Date", "CheckInTime", "CheckOutTime", "AttendanceStatus", "Notes"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,EmployeeName,Date,CheckInTime,CheckOutTime,AttendanceStatus,Notes"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    AttendanceStatus:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    AttendanceStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string